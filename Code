//YOUSEF MOHAMED TAMER 20235047


/* PROBLEM 1
#include <iostream>
using namespace std;
double calculateHanzalahage(int month, int year){
double birthyear=1938;
double birthmonth=5;

double age;
double fraction;

if (year>1948&&year<2027)
    {return 10;}
else if (year<=1948)
   {

   age=year-birthyear;
    fraction=(month-birthmonth)/12;

    if (age<0)
        cout<<"Invalid. Try again.\n";
    else
        age=age+fraction;
        return age;}

else
    {age=year-2017;
    fraction=(month-birthmonth)/12;
    age=age+fraction;
    return age;}

}


int main()
{cout<<calculateHanzalahage(5,1947)<<endl;
cout<<calculateHanzalahage(1,2024)<<endl;
cout<<calculateHanzalahage(11,2027)<<endl;
cout<<calculateHanzalahage(6,2027)<<endl;
cout<<calculateHanzalahage(5,2028)<<endl;



return 0;}*/

/* PROBLEM 2
#include <iostream>
#include <string>
using namespace std;

//
int number_of_matches(string x, string y,int z)
{
	int count=0,i = 0;
	for(int i=0;i<=z;i++)
	{
		if (x[i] == y[i])
			count += 1;
		else if (x[i] || y[i] ==0)
			break;


	}
	return count;
}


int main()
{
	int a,z;
	string strA, strB;
	cout << "Enter first Word. \n";
	cin >> strA;
	cout << "Enter second Word. \n";
	cin>> strB;
	if (strA.length() > strB.length())
	{
		z = strB.length();
		a = number_of_matches(strA, strB, z);
	}
	else if (strA.length() < strB.length())
	{
		z = strA.length();
		a = number_of_matches(strA, strB, z);
	}
	else
		a= z = strA.length();
	cout << a;

}*/


/* PROBLEM 3
#include <iostream>
using namespace std;

void divisor(int num) {//Making a function to use

   for (int i=1;i<=num;i++)//make a for loop that checks for divisions starting from 1
   {double div=float(num)/i;//a float value to check if the number is an integer or not
   int div1=float(num)/i;//integer
   if (div==div1)//if the integer= float then it is an integer, not a fraction
   {cout<< div1<<endl;}
   else
    continue;}
}

int main() {
    cout<<"This program will show you the divisors of any positive integer you input in a decreasing order. If you wish to exit the program type n. Otherwise, the program will continue working.\n";
  char choice;
  do {cout<<"Do you wish to enter a number? (y or n)\n";//do while loop to repeat until user chooses to exit.

    cin>>choice;
    switch(choice){
case 'y':cout<<"Enter your positive integer.\n";//if user chooses to enter
double entry;
cin>>entry;
if (entry<=0||entry!=(int)entry)//check if its a positive integer and isn't 0
    {cout<<"Invalid choice. Try again.\n";
    break;}
else

divisor((int)entry);
break;
    case 'n':break;
    default:
        cout<<"Invalid choice. Try again.\n";
        break;}}
  while(choice!='n');
return 0;}*/


/*PROBLEM 4
#include <iostream>
using namespace std;
int shift_right(double array1[10], int left, int right, int distance)//make a function that uses the 4 variables we need
{double array2[10];//make another array to store the values of the shifted array
for(int i=0;i<10;i++)//making a loop to copy all the elements in the first array to the second one
{array2[i]=array1[i];

}
for(int i=left;i<=right;i++)//a for loop that starts from the first element to be shifted until it reaches the last element to be shifted
    {array2[i+distance]=array1[i];//the shifted value is equal to the unshifted value, so element 5 would equal element 3 in array1
    }
    for(int i=0;i<10;i++)
    {cout<<array2[i]<<",";//for loop to print the elements of the array
    }
}


int main() {double array0[]={5.8,2.6,9.1,3.4,7.0,5.1,8.8,0.3,-4.1,8.0,2.7};
shift_right(array0,3,7,2);
return 0;}*/

/* PROBLEM 5
#include <stdio.h>
#define MAX 50
int main(){
    int a[MAX] [MAX], b[MAX] [MAX], product[MAX][MAX];
    int arows, acolums, brows, bcolumns;
    int i, j, k;
    int sum = 0;

    printf("Enter the rows and columns of the matrix a:");
    scanf("%d %d", &arows, &acolumns);

    printf("Enter the elements of matrix a:\n");
    for(i=0, i<arows; i++)
    {
        for(j=0; j<acolumns; j++);
        {
            scanf("%d", &a[i] [j]);
        }
    }
    printf("Enter the rows and columns of the matrix b:  ");
    scanf("%d,&d", &brows, &bcolumns);
    if(brows!=acolumns)
    {
        printf("sorry! We Cannot multiply the matrices a and b");
    }
    else
    {
        print("Enter the elements of matrix b: \n")
        for(i=0; i<brows; i++)
        {
            for(j=0; j<bcolumns; j++)
            {
                scanf("%d", &b[i][j]);
            }
        }
    }
    printf("\n");

    for(i=0; i<arows; i++)
    {
        for(j=0; j<bcolumns; j++)
        {
            for(k=0; k<brows; k++)
            {
                sum += a[j][k] * b[k][j];
            }
            product[i][j] = sum;
            sum=0;
        }
    }
    printf("Resultant matrix\n");
    for(i=0; i<arows; i++)
    {
        for(j=0; j<bcolumns; j++)
        {
            print("%d", product[i][j]);
        }
        printf("\n");
    }

    return 0;
}*/



/*PROBLEM 6
#include <iostream>
using namespace std;
double calculateHanzalahage(int month, int year){
double birthyear=1938;
double birthmonth=5;

double age;
double fraction;

if (year>1948&&year<2027)//any point in time after 1948 until 2027, his age would remain the same, 10.
    {return 10;}
else if (year<=1948)//this is to measure his age before he reached 10
   {

   age=year-birthyear;
    fraction=(month-birthmonth)/12;//to accurately calculate his age by months

    if (age<0)//in case the year is before his birth
        cout<<"Invalid. Try again.\n";
    else
        age=age+fraction;
        return age;}

else
    {age=year-2017;//to calculate his age after 2027, starting from 2017 cause he would start to age again at 10 years old in 2027.
    fraction=(month-birthmonth)/12;
    age=age+fraction;
    return age;}

}


int main()
{cout<<calculateHanzalahage(5,1947)<<endl;
cout<<calculateHanzalahage(1,2024)<<endl;
cout<<calculateHanzalahage(11,2027)<<endl;
cout<<calculateHanzalahage(6,2027)<<endl;
cout<<calculateHanzalahage(5,2028)<<endl;



return 0;}*/

/*  PROBLEM 7
#include<iostream>
using namespace std;
int main(){
    int i,x;
    char str[75];

    cout<<"please enter a string: \n"
    cin>>str;

    cout<<"\n please choose following options:\n"
    cout<<"1 = Encrypt the string.\n"
    cout<<"2 = Decrypt the string.\n"
    cin>>x;

    //using switch case statements
    switch(x){
        //first case for encrypting a string
        case 1:
            for(i=0; (i<75 && str[i]!='\0');i++)
            str[i]=str[i]+4; //the key for encrytion is 5 that is added to ASCII value

            cout<<"\nEncrypted string:"<<str<<endl;
            break;
        //secound case for decrypting a string
        case 2:
             for(i=0(i<75 && str[i]!='\0');i++)
             str[i]=str[i]-4; //the key for encrytion is 5 that is subtracted to ASCII value
             cout<<"\nDecrypted string: "<<str<<endl;
             break;
             default:
                  cout<<"\nInvalid Input!!!\n";
    }
    return 0;

}*/



/*PROBLEM 8
#include <iostream>
using namespace std;

// Function to update the graph matrix based on the given edges
void updateGraphMatrix(int graphMatrix[][6], char source, char destination, int weight) {
    int sourceIndex = source - 'a';
    int destinationIndex = destination - 'a';
    graphMatrix[sourceIndex][destinationIndex] = weight;
    graphMatrix[destinationIndex][sourceIndex] = weight; // Since it's an undirected graph
}

// Function to initialize the graph matrix with zeros
void initializeGraphMatrix(int graphMatrix[][6]) {
    for (int i = 0; i < 6; ++i) {
        for (int j = 0; j < 6; ++j) {
            graphMatrix[i][j] = 0;
        }
    }
}

// Function to print the graph matrix
void printGraphMatrix(int graphMatrix[][6]) {
    char labels[] = {'a', 'b', 'c', 'd', 'e', 'f'};

    // Print column labels
    cout << "  ";
    for (char label : labels) {
        cout << label << " ";
    }
    cout << endl;

    // Print rows with labels and matrix values
    for (int i = 0; i < 6; ++i) {
        cout << labels[i] << " ";
        for (int j = 0; j < 6; ++j) {
            cout << graphMatrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    // Initialize the graph matrix with zeros
    int graphMatrix[6][6];
    initializeGraphMatrix(graphMatrix);

    // Example edges
    char edges[][3] = {{'a', 'b', 5}, {'a', 'c', 10}, {'b', 'd', 4}, {'f', 'e', 8}, {'c', 'f', 2}};

    // Update the graph matrix based on the edges
    for (int i = 0; i < sizeof(edges) / sizeof(edges[0]); ++i) {
        char source = edges[i][0];
        char destination = edges[i][1];
        int weight = edges[i][2];
        updateGraphMatrix(graphMatrix, source, destination, weight);
    }

    // Print the graph matrix
    cout << "Graph Matrix representation:" << endl;
    printGraphMatrix(graphMatrix);

    return 0;
}*/

